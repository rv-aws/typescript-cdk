/// <reference types="node" />
/// <reference types="socket.io" />
import { EventEmitter } from 'events';
import { Connection } from './connection';
import { Auth } from './auth';
import { Schematic } from '../common/schema/schematic';
export declare class Server<T extends Schematic = Schematic> extends EventEmitter {
    /**
     * Constructs a new `Server` instance.
     *
     * @param options
     */
    constructor(options: ServerOptions);
    constructor(port: number);
    /**
     * Starts the client. If the `auth` parameter is provided, it will be called as an authentication helper and
     * provided an `Auth` instance as the sole parameter. The `auth` callback should generally return a Promise that
     * resolves when all authentication steps are complete.
     *
     * @param auth
     */
    start(): void;
    /**
     * Fires upon a new incoming connection.
     *
     * @param event
     * @param listener
     */
    on(event: 'connection', listener: (connection: Connection<T>, auth: Auth<T>) => void): this;
}
export interface ServerOptions {
    /**
     * A string containing the URL to the remote server, including the scheme, hostname, port, and path.
     */
    port: number;
    /**
     * Custom options for the underlying socket.io server.
     */
    server?: SocketIO.ServerOptions;
    /**
     * Enforces SSL encryption.
     */
    ssl?: ServerSSLOptions;
}
export interface ServerSSLOptions {
    /**
     * The contents of the private key in PEM format.
     */
    key: Buffer | string;
    /**
     * The contents of the public key in PEM format.
     */
    cert: Buffer | string;
    /**
     * If `true`, the server will require clients to send their own certificates for verification. Defaults to `false`.
     *
     * @see `rejectUnauthorized`
     * @see `ca`
     */
    requestCert?: boolean;
    /**
     * If `true`, the server will reject clients whose certificates fail to validate according to the `ca`. Defaults to
     * `true`, but only applies when `requestCert` is also `true`.
     *
     * @see `requestCert`
     * @see `ca`
     */
    rejectUnauthorized?: boolean;
    /**
     * The CA certificate(s) to trust. If not specified, this defaults to Mozilla's bundle. This is only applicable
     * when the `requestCert` option is enabled, and is only used to validate clients. Generally, you should only use
     * this to whitelist self-signed certificates.
     *
     * @see `requestCert`
     * @see `rejectUnauthorized`
     */
    ca?: Buffer | string;
}
