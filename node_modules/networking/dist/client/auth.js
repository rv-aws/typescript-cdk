"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../common/errors");
const encryption_1 = require("../common/encryption");
const authQueue_1 = require("../common/authQueue");
class Auth {
    /**
     * Constructs a new `Auth` instance.
     *
     * @param options
     */
    constructor(socket) {
        this.socket = socket;
        this.queue = new authQueue_1.AuthQueue(socket);
    }
    /**
     * Sends the given credentials to the server and waits for a response. Returns `true` if the server accepts the
     * credentials, or throws an `AuthError` otherwise.
     *
     * @param credentials
     */
    login(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            this.queue.sendPacket('login', credentials);
            if (!(yield this.queue.getResolution())) {
                throw new errors_1.AuthError('Login credentials were rejected by server');
            }
            return true;
        });
    }
    /**
     * Performs an encryption test against the server. In short, the server must also provide the same secret for
     * authentication to be successful, meaning both sides must know the secret key beforehand. This is rarely an
     * appropriate option for authentication, but when it is, it's a powerful way to prove the identities of both the
     * client and server. Throws an `AuthError` if the server fails the test.
     *
     * @param key
     */
    encrypt(secret) {
        return __awaiter(this, void 0, void 0, function* () {
            let key = encryption_1.Encryption.generateKey(secret);
            let token = (yield encryption_1.Encryption.generateRandom(256)).toString('hex');
            let cipherText = yield encryption_1.Encryption.encrypt(key, token);
            // Send our cipher text to the other side
            this.queue.sendPacket('encrypt/start', { cipher: cipherText.toString('base64') });
            // Wait for the other side to send us the decrypted data as well as its own cipher text
            let response = yield this.queue.getPacket('encrypt/step');
            if (response.error)
                throw new errors_1.AuthError('Decryption failed on server');
            if (token !== Buffer.from(response.token, 'base64').toString()) {
                this.queue.sendResolution(false);
                throw new errors_1.AuthError('Decrypted token sent by the server did not match');
            }
            // Send acceptance to signal that the token was correct
            this.queue.sendResolution(true);
            // Decrypt the other side's cipher text and send it
            try {
                let remoteToken = yield encryption_1.Encryption.decrypt(key, Buffer.from(response.cipher, 'base64'));
                this.queue.sendPacket('encrypt/finish', { token: remoteToken });
            }
            catch (err) {
                this.queue.sendPacket('encrypt/finish', { error: true });
                throw new errors_1.AuthError('Error decrypting the server\'s cipher text: ' + err.message);
            }
            // Wait for acceptance, error if rejected
            if (!(yield this.queue.getResolution())) {
                throw new errors_1.AuthError('Server rejected our encryption test key');
            }
            return true;
        });
    }
}
exports.Auth = Auth;
