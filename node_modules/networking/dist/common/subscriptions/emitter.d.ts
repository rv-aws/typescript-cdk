import { Json } from '../serialize';
import { Receipt } from './receipt';
import { Client } from '../../client/client';
import { Connection } from '../../server/connection';
import { Request } from './request';
import { Schematic, Group, Key } from '../schema/schematic';
export declare class SubscriptionEmitter<T extends Schematic, I extends Group, O extends Group> {
    protected client: Client | Connection;
    constructor(client: Client);
    constructor(client: Connection);
    /**
     * Sends a new value to the remote if it has any active subscriptions for the given event and filter pair.
     *
     * @param event The name of the subscription event.
     * @param filter The descriptor for what the value is about.
     * @param value The new value to emit.
     */
    emit<E extends Events<I>>(event: E, filter: Filter<I, E>, value: Value<I, E>): void;
    emit(event: string, filter: Json, value: any): void;
    /**
     * Adds a function to guard incoming subscriptions for the given event. The function will be given a `Request`
     * instance as its sole parameter, which can be used to check the filter and to reject the subscription if
     * necessary. The function can return a promise.
     *
     * @param event
     * @param handler
     */
    on<E extends Events<I>>(event: E, handler: (sub: Request) => any): void;
    on(event: string, handler: (sub: Request) => any): void;
    /**
     * Creates a subscription that receives new values from the remote.
     *
     * @param event
     * @param filter
     * @param handler
     * @param oneTime
     */
    create<E extends Events<O>>(event: E, filter: Filter<O, E>, handler: (sub: Receipt, value: Value<O, E>) => void): Promise<Receipt>;
    create(event: string, filter: Json, handler: (sub: Receipt, value: any) => void): Promise<Receipt>;
    /**
     * Removes and closes a subscription.
     *
     * @param event
     * @param filter
     * @param handler
     */
    remove<E extends Events<O>>(event: E, filter: Filter<O, E>, handler?: Function): void;
    remove<E extends Events<O>>(event: E, filter: string, id?: number): void;
    remove(event: string, filter: Json, handler?: Function): void;
    remove(event: string, filter: string, id?: number): void;
    /**
     * Closes all of our active subscriptions. This only applies to local subscriptions which received new values from
     * the remote. All subscriptions originating from the remote will persist until closed from the remote's end.
     */
    clear(): void;
    /**
     * Handles a clear request from the remote to close all of its subscriptions.
     */
    onSubscriptionClear(): void;
}
export declare type Events<G extends Group> = Key<G['subscriptions']>;
export declare type Subscription<G extends Group, K extends Events<G>> = G extends undefined ? ({
    filter: Json;
    value: any;
}) : (G['subscriptions'] extends undefined ? ({
    filter: Json;
    value: any;
}) : NonNullable<G['subscriptions']>[K]);
export declare type Filter<G extends Group, K extends Events<G>> = Subscription<G, K>['filter'];
export declare type Value<G extends Group, K extends Events<G>> = Subscription<G, K>['value'];
