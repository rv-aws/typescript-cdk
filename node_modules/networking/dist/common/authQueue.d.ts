/// <reference types="socket.io" />
/// <reference types="socket.io-client" />
export declare class AuthQueue {
    private socket;
    private resolutions;
    private packets;
    private terminated;
    private resolutionPromises;
    private packetPromises;
    private terminatedPromises;
    constructor(socket: SocketIO.Socket | SocketIOClient.Socket);
    private handleAuthPacket;
    private handleResolutionPacket;
    private handleTerminatePacket;
    /**
     * Resolves with the next authentication packet of the specified type. Throws an `AuthError` if we receive one of
     * a different type, or if the received authentication sequence doesn't match.
     *
     * @param type
     */
    getPacket(type: string): Promise<any>;
    /**
     * Resolves with the next available resolution signal as a boolean.
     */
    getResolution(): Promise<boolean>;
    getTermination(): Promise<void>;
    /**
     * Sends an authentication packet to the other side.
     *
     * @param type
     * @param payload
     */
    sendPacket(type: string, payload: any): void;
    /**
     * Sends an authentication packet to the other side.
     *
     * @param success
     */
    sendResolution(success: boolean): void;
}
export interface AuthPacket {
    type: string;
    payload: any;
}
