import { Json } from '../serialize';
import { Emitter } from './emitter';
import { Schematic, Group, Key } from '../schema/schematic';
export declare class RequestEmitter<T extends Schematic, I extends Group, O extends Group> extends Emitter<T> {
    emit<E extends Events<O>>(event: E, ...args: Params<O, E>): Promise<Response<O, E>>;
    on<E extends Events<I>>(event: E, callback: Callback<I, E>): void;
    once<E extends Events<I>>(event: E, callback: Callback<I, E>): void;
}
export declare type Events<G extends Group> = Key<G['requests']>;
export declare type Callback<G extends Group, K extends keyof NonNullable<G['requests']>> = G extends undefined ? (...args: Json[]) => any : (G['requests'] extends undefined ? (...args: Json[]) => any : (...args: Parameters<NonNullable<G['requests']>[K]>) => ReturnType<NonNullable<G['requests']>[K]> | Promise<ReturnType<NonNullable<G['requests']>[K]>>);
export declare type Response<G extends Group, K extends Events<G>> = G extends undefined ? any : (G['requests'] extends undefined ? any : ReturnType<NonNullable<G['requests']>[K]>);
export declare type Params<G extends Group, K extends Events<G>> = Parameters<Callback<G, K>>;
