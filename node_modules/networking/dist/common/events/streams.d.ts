/// <reference types="node" />
import { Json } from '../serialize';
import { Emitter } from './emitter';
import { Stream } from 'stream';
import { Tracker } from '../stream/tracker';
import { IOStream } from '../stream/iostream';
import { Schematic, Group, Key } from '../schema/schematic';
export declare class StreamEmitter<T extends Schematic, I extends Group, O extends Group> extends Emitter<T> {
    emit<E extends Events<O>>(event: E, stream: Stream, ...args: Params<O, E>): Promise<Tracker>;
    on<E extends Events<I>>(event: E, callback: StreamCallback<I, E>): void;
    once<E extends Events<I>>(event: E, callback: StreamCallback<I, E>): void;
}
export declare type Events<G extends Group> = Key<G['streams']>;
export declare type Callback<G extends Group, K extends keyof NonNullable<G['streams']>> = G extends undefined ? (...args: Json[]) => void : (G['streams'] extends undefined ? (...args: Json[]) => any : NonNullable<G['streams']>[K]);
export declare type StreamCallback<G extends Group, K extends keyof NonNullable<G['streams']>> = G extends undefined ? (...args: Json[]) => void : (G['streams'] extends undefined ? (stream: IOStream, ...args: Json[]) => any : ((stream: IOStream, ...args: Parameters<NonNullable<G['streams']>[K]>) => any));
export declare type Params<G extends Group, K extends Events<G>> = Parameters<Callback<G, K>>;
