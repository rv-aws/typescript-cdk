"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Emitter {
    constructor(client) {
        this.client = client;
        /**
         * @internal
         */
        this.callbacks = {};
    }
    /**
     * The current socket for the client. Throws an error if a socket is not available.
     * @internal
     */
    get socket() {
        let socket = this.client.getSocket();
        if (socket)
            return socket;
        throw new Error('Cannot emit while disconnected');
    }
    /**
     * Removes all listeners for the given event, or across the entire emitter if the event name is omitted.
     *
     * @param event
     * @internal
     */
    removeListeners(event) {
        if (event)
            this.callbacks[event] = [];
        else
            this.callbacks = {};
    }
    /**
     * Returns an array of listener functions attached to the given event.
     *
     * @param event The name of the event.
     * @param consume Determines whether 'once' listeners will expire from this call.
     * @internal
     */
    listeners(event, consume = false) {
        let listeners = [];
        if (event in this.callbacks) {
            listeners = this.callbacks[event].map(listener => listener.callback);
            if (consume) {
                this.callbacks[event] = this.callbacks[event].filter(listener => !listener.once);
            }
        }
        return listeners;
    }
    /**
     * Returns an array of listener functions attached to the given event.
     *
     * @param event The name of the event.
     * @param consume Determines whether 'once' listeners will expire from this call.
     * @internal
     */
    getLastListener(event, consume = false) {
        if (event in this.callbacks) {
            let listeners = this.callbacks[event];
            if (!listeners.length)
                return;
            if (listeners[listeners.length - 1].once) {
                return this.callbacks[event].pop().callback;
            }
            return listeners[listeners.length - 1].callback;
        }
    }
}
exports.Emitter = Emitter;
